import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import {
  Container,
  Typography,
  TextField,
  Button,
  Box,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  FormControlLabel,
  Switch,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert,
  Chip,
  Card,
  CardContent,
} from "@mui/material";
import {
  CheckCircle,
  PhotoCamera,
  EditNote,
  LocationOn,
} from "@mui/icons-material";
import apiClient from "../../../../api/client";
import Header from "../../../layout/Header";

// Tarƒ±m R√∂mork Markalarƒ±
const TARIM_ROMORK_BRANDS = [
  "Se√ßiniz",
  "ACG R√∂mork",
  "Akdoƒüan",
  "Aksoylu Treyler",
  "Alim Dorse",
  "Alpsan",
  "Altƒ±nordu Treyler",
  "Aydƒ±nlƒ±k Karde≈üler",
  "Aysan R√∂mork",
  "Ba≈üaran R√∂mork",
  "Ba≈üarƒ±r R√∂mork",
  "Baysallar",
  "Bey Treyler",
  "Bi√ßeroƒülu",
  "Brosco",
  "Caselli",
  "CastroMax Trailers",
  "Cebeci",
  "Ceytech",
  "√áar≈üan Treyler",
  "√áetiner",
  "Ekol",
  "Eli√ßelik",
  "Elit R√∂mork",
  "Emek√ßiler",
  "Emek√ßiler Tarƒ±m Makinalarƒ±",
  "Erdallar",
  "Ersel Trailer",
  "Eroƒülu",
  "Ferhat",
  "Fesan",
  "Fruehauf",
  "Gani ≈ûahan Treyler",
  "Goldoni",
  "G√ºndoƒüdu",
  "G√ºrler",
  "Hocaoƒülu R√∂mork",
  "H√ºrsan Treyler",
  "ƒ∞brahim √ñrs",
  "Kabay",
  "Kandil R√∂mork",
  "Karalar",
  "Kasasan",
  "Keskin",
  "Koluman",
  "Kontir",
  "K√∂seoƒülu",
  "Makinsan",
  "Meiller",
  "Meral Kasa",
  "Mertta≈ü",
  "Minicargo",
  "Mutlusan",
  "New Holland",
  "Nil Cargo R√∂mork",
  "Oktar Makina",
  "Oru√ß Karoser",
  "Otto",
  "√ñzalsan",
  "√ñz√ßevik",
  "√ñzdemir",
  "√ñzen ƒ∞≈ü",
  "√ñzg√ºl Treyler",
  "√ñnder Treyler",
  "Palazoƒülu",
  "Pa≈üaoƒülu Dorse Treyler",
  "Pino R√∂mork",
  "Poslu",
  "Schmitz",
  "Se√ßilen",
  "Se√ßkin",
  "Serin Treyler",
  "Sistem Damper Treyler",
  "Sommer",
  "S√ºperaktif",
  "≈ûen",
  "Tako",
  "Taral",
  "Tarƒ±m Kredi",
  "Tinaz",
  "Tirsan",
  "Topaloƒülu Karoser",
  "TowGo",
  "Toygar",
  "√ú√ßel",
  "Vuraner",
  "Westfalia",
  "Yeksan",
  "Yenkar",
  "Yƒ±ldƒ±z Treyler",
  "Yƒ±lmaz",
  "Y√ºkselen Treyler",
  "√ñzel ƒ∞malat",
  "Diƒüer",
];

interface City {
  id: number;
  name: string;
  plateCode: string;
}

interface District {
  id: number;
  name: string;
  cityId: number;
}

interface FormData {
  // Temel bilgiler
  title: string;
  description: string;
  productionYear: string;
  price: string;
  romorkMarkasi: string; // Yeni alan
  volume: string;
  condition: string;
  isExchangeable: string;
  hasDamper: boolean;

  // Konum
  cityId: string;
  districtId: string;

  // ƒ∞leti≈üim
  sellerName: string;
  sellerPhone: string;
  sellerEmail: string;

  // Fotoƒüraflar
  photos: File[];
  showcasePhoto: File | null;
}

const AcikKasaForm: React.FC = () => {
  const navigate = useNavigate();
  const { categorySlug, brandSlug, modelSlug, variantSlug } = useParams();

  const [cities, setCities] = useState<City[]>([]);
  const [districts, setDistricts] = useState<District[]>([]);
  const [loading, setLoading] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [showcasePreview, setShowcasePreview] = useState<string | null>(null);
  const [photoPreviews, setPhotoPreviews] = useState<string[]>([]);

  const [formData, setFormData] = useState<FormData>({
    title: "",
    description: "",
    productionYear: "",
    price: "",
    romorkMarkasi: "Se√ßiniz",
    volume: "",
    condition: "ikinci-el",
    isExchangeable: "olabilir",
    hasDamper: false,
    cityId: "",
    districtId: "",
    sellerName: "",
    sellerPhone: "",
    sellerEmail: "",
    photos: [],
    showcasePhoto: null,
  });

  useEffect(() => {
    const fetchCities = async () => {
      try {
        const response = await apiClient.get("/ads/cities");
        setCities(response.data as City[]);
      } catch (error) {
        console.error("≈ûehirler y√ºklenirken hata:", error);
      }
    };

    fetchCities();
  }, []);

  const handleCityChange = async (cityId: string) => {
    setFormData((prev) => ({ ...prev, cityId, districtId: "" }));
    setDistricts([]);

    if (cityId) {
      try {
        const response = await apiClient.get(`/ads/cities/${cityId}/districts`);
        setDistricts(response.data as District[]);
      } catch (error) {
        console.error("ƒ∞l√ßeler y√ºklenirken hata:", error);
      }
    }
  };

  const handleInputChange = (
    field: keyof FormData,
    value: string | boolean | File[] | File | null
  ) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handlePhotoUpload = (
    event: React.ChangeEvent<HTMLInputElement>,
    isShowcase = false
  ) => {
    const files = event.target.files;
    if (files) {
      if (isShowcase) {
        const file = files[0];
        setFormData((prev) => ({ ...prev, showcasePhoto: file }));

        // Vitrin fotoƒürafƒ± √∂nizlemesi olu≈ütur
        const reader = new FileReader();
        reader.onload = (e) => {
          setShowcasePreview(e.target?.result as string);
        };
        reader.readAsDataURL(file);
      } else {
        const currentPhotos = formData.photos;
        const newPhotos = Array.from(files);
        const totalPhotos = currentPhotos.length + newPhotos.length;

        if (totalPhotos <= 15) {
          setFormData((prev) => ({
            ...prev,
            photos: [...currentPhotos, ...newPhotos],
          }));

          // Yeni fotoƒüraflar i√ßin √∂nizlemeler olu≈ütur
          const newPreviews: string[] = [];
          newPhotos.forEach((file) => {
            const reader = new FileReader();
            reader.onload = (e) => {
              newPreviews.push(e.target?.result as string);
              if (newPreviews.length === newPhotos.length) {
                setPhotoPreviews((prev) => [...prev, ...newPreviews]);
              }
            };
            reader.readAsDataURL(file);
          });
        } else {
          alert("En fazla 15 fotoƒüraf y√ºkleyebilirsiniz");
        }
      }
    }
  };

  const removePhoto = (index: number) => {
    setFormData((prev) => ({
      ...prev,
      photos: prev.photos.filter((_, i) => i !== index),
    }));
    setPhotoPreviews((prev) => prev.filter((_, i) => i !== index));
  };

  const generateYearOptions = () => {
    const currentYear = new Date().getFullYear();
    const years = [];
    for (let year = currentYear; year >= 1990; year--) {
      years.push(year);
    }
    return years;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const submitData = new FormData();

      // Backend'in beklediƒüi field isimleriyle g√∂nder
      submitData.append("title", formData.title);
      submitData.append("description", formData.description);
      submitData.append("price", formData.price);
      submitData.append("productionYear", formData.productionYear);
      submitData.append("volume", formData.volume);
      submitData.append("exchangeable", formData.isExchangeable);
      submitData.append("hasDamper", formData.hasDamper.toString());
      submitData.append("cityId", formData.cityId);
      submitData.append("districtId", formData.districtId);
      submitData.append("contactName", formData.sellerName);
      submitData.append("phone", formData.sellerPhone);
      submitData.append("email", formData.sellerEmail);
      submitData.append("currency", "TL");

      // Kategori bilgilerini ekle
      submitData.append("categorySlug", categorySlug || "");
      submitData.append("brandSlug", brandSlug || "");
      submitData.append("modelSlug", modelSlug || "");
      submitData.append("variantSlug", variantSlug || "");
      submitData.append("subType", "acik-kasa");

      // Debug: URL'den gelen kategori bilgilerini kontrol et
      console.log("URL'den gelen kategori bilgileri:", {
        categorySlug,
        brandSlug,
        modelSlug,
        variantSlug,
      });

      // T√ºm fotoƒüraflarƒ± tek bir array olarak g√∂nder (backend'in beklediƒüi ≈üekilde)
      if (formData.showcasePhoto) {
        submitData.append("photos", formData.showcasePhoto);
      }

      formData.photos.forEach((photo) => {
        submitData.append("photos", photo);
      });

      const response = await apiClient.post("/ads/tarim-romork", submitData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      console.log("ƒ∞lan ba≈üarƒ±yla olu≈üturuldu:", response.data);
      setSubmitSuccess(true);

      // Ba≈üarƒ±lƒ± olduƒüunda anasayfaya y√∂nlendir
      setTimeout(() => {
        navigate("/");
      }, 2000); // 2 saniye sonra y√∂nlendir
    } catch (error) {
      console.error("ƒ∞lan olu≈üturulurken hata:", error);
      alert("ƒ∞lan olu≈üturulurken bir hata olu≈ütu");
    } finally {
      setLoading(false);
    }
  };

  const handleSuccessClose = () => {
    setSubmitSuccess(false);
    navigate("/");
  };

  return (
    <>
      <Header />
      <Container maxWidth="lg" sx={{ py: 4 }}>
        <form onSubmit={handleSubmit}>
          <Box sx={{ display: "flex", flexDirection: "column", gap: 4 }}>
            {/* üìù Temel Bilgiler */}
            <Card
              elevation={6}
              sx={{
                borderRadius: 3,
                background: "linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)",
                border: "1px solid #e2e8f0",
                transition: "all 0.3s ease-in-out",
                "&:hover": {
                  transform: "translateY(-2px)",
                  boxShadow: "0 8px 30px rgba(0,0,0,0.12)",
                },
              }}
            >
              <CardContent sx={{ p: 4 }}>
                <Box sx={{ display: "flex", alignItems: "center", mb: 3 }}>
                  <Box
                    sx={{
                      background:
                        "linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)",
                      borderRadius: "50%",
                      p: 1.5,
                      mr: 2,
                    }}
                  >
                    <EditNote sx={{ color: "white", fontSize: 28 }} />
                  </Box>
                  <Typography
                    variant="h5"
                    sx={{
                      fontWeight: 700,
                      background:
                        "linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)",
                      WebkitBackgroundClip: "text",
                      WebkitTextFillColor: "transparent",
                    }}
                  >
                    Temel Bilgiler
                  </Typography>
                </Box>

                <Box sx={{ display: "flex", flexDirection: "column", gap: 3 }}>
                  {/* ƒ∞lan Ba≈ülƒ±ƒüƒ± */}
                  <TextField
                    fullWidth
                    label="ƒ∞lan Ba≈ülƒ±ƒüƒ±"
                    value={formData.title}
                    onChange={(e) => handleInputChange("title", e.target.value)}
                    placeholder="√ñrn: 2020 Model A√ßƒ±k Kasa Tarƒ±m R√∂morku"
                    required
                    variant="outlined"
                    sx={{
                      "& .MuiOutlinedInput-root": {
                        borderRadius: 3,
                        "&:hover fieldset": { borderColor: "primary.main" },
                      },
                    }}
                  />

                  {/* A√ßƒ±klama */}
                  <TextField
                    fullWidth
                    label="ƒ∞lan A√ßƒ±klamasƒ±"
                    multiline
                    rows={4}
                    value={formData.description}
                    onChange={(e) =>
                      handleInputChange("description", e.target.value)
                    }
                    placeholder="Ara√ß hakkƒ±nda detaylƒ± bilgi veriniz..."
                    required
                    variant="outlined"
                    sx={{
                      "& .MuiOutlinedInput-root": {
                        borderRadius: 3,
                        "&:hover fieldset": { borderColor: "primary.main" },
                      },
                    }}
                  />

                  {/* Alanlar Grid */}
                  <Box
                    sx={{
                      display: "grid",
                      gridTemplateColumns:
                        "repeat(auto-fit, minmax(200px, 1fr))",
                      gap: 3,
                    }}
                  >
                    {/* √úretim Yƒ±lƒ± */}
                    <FormControl
                      fullWidth
                      sx={{
                        "& .MuiOutlinedInput-root": {
                          borderRadius: 3,
                          "&:hover fieldset": { borderColor: "primary.main" },
                        },
                      }}
                    >
                      <InputLabel>√úretim Yƒ±lƒ±</InputLabel>
                      <Select
                        value={formData.productionYear}
                        onChange={(e) =>
                          handleInputChange("productionYear", e.target.value)
                        }
                        label="√úretim Yƒ±lƒ±"
                      >
                        {generateYearOptions().map((year) => (
                          <MenuItem key={year} value={year.toString()}>
                            {year}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>

                    {/* Hacim */}

                    {/* Durum */}

                    {/* Takas */}
                    <FormControl
                      fullWidth
                      sx={{
                        "& .MuiOutlinedInput-root": {
                          borderRadius: 3,
                          "&:hover fieldset": { borderColor: "primary.main" },
                        },
                      }}
                    >
                      <InputLabel>Takas</InputLabel>
                      <Select
                        value={formData.isExchangeable}
                        onChange={(e) =>
                          handleInputChange("isExchangeable", e.target.value)
                        }
                        label="Takas"
                      >
                        <MenuItem value="evet">‚úÖ Evet</MenuItem>
                        <MenuItem value="hayir">‚ùå Hayƒ±r</MenuItem>
                        <MenuItem value="olabilir">ü§î Olabilir</MenuItem>
                      </Select>
                    </FormControl>

                    {/* R√∂mork Markasƒ± */}
                    <FormControl fullWidth required>
                      <InputLabel>R√∂mork Markasƒ±</InputLabel>
                      <Select
                        value={formData.romorkMarkasi}
                        label="R√∂mork Markasƒ±"
                        onChange={(e) =>
                          handleInputChange("romorkMarkasi", e.target.value)
                        }
                      >
                        {TARIM_ROMORK_BRANDS.map((brand) => (
                          <MenuItem key={brand} value={brand}>
                            {brand}
                          </MenuItem>
                        ))}
                      </Select>
                    </FormControl>

                    {/* Fiyat */}
                    <TextField
                      fullWidth
                      label="Fiyat (TL)"
                      value={formData.price}
                      onChange={(e) =>
                        handleInputChange("price", e.target.value)
                      }
                      placeholder="√ñrn: 150000"
                      type="number"
                      required
                      variant="outlined"
                      sx={{
                        "& .MuiOutlinedInput-root": {
                          borderRadius: 3,
                          "&:hover fieldset": { borderColor: "primary.main" },
                        },
                      }}
                    />

                    {/* Damperli */}
                    <Box sx={{ display: "flex", alignItems: "center", pt: 1 }}>
                      <FormControlLabel
                        control={
                          <Switch
                            checked={formData.hasDamper}
                            onChange={(e) =>
                              handleInputChange("hasDamper", e.target.checked)
                            }
                            color="primary"
                          />
                        }
                        label="üöõ Damperli"
                        sx={{ fontWeight: 600 }}
                      />
                    </Box>
                  </Box>
                </Box>
              </CardContent>
            </Card>

            {/* üì∏ Fotoƒüraf Y√ºkleme */}
            <Card
              elevation={6}
              sx={{
                borderRadius: 3,
                background: "linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)",
                border: "1px solid #e2e8f0",
                transition: "all 0.3s ease-in-out",
                "&:hover": {
                  transform: "translateY(-2px)",
                  boxShadow: "0 8px 30px rgba(0,0,0,0.12)",
                },
              }}
            >
              <CardContent sx={{ p: 4 }}>
                <Box sx={{ display: "flex", alignItems: "center", mb: 3 }}>
                  <Box
                    sx={{
                      background:
                        "linear-gradient(135deg, #FF6B35 0%, #F7931E 100%)",
                      borderRadius: "50%",
                      p: 1.5,
                      mr: 2,
                    }}
                  >
                    <PhotoCamera sx={{ color: "white", fontSize: 28 }} />
                  </Box>
                  <Typography
                    variant="h5"
                    sx={{
                      fontWeight: 700,
                      background:
                        "linear-gradient(135deg, #FF6B35 0%, #F7931E 100%)",
                      WebkitBackgroundClip: "text",
                      WebkitTextFillColor: "transparent",
                    }}
                  >
                    Fotoƒüraf Y√ºkleme
                  </Typography>
                </Box>

                <Box sx={{ display: "flex", flexDirection: "column", gap: 3 }}>
                  {/* Vitrin Fotoƒürafƒ± */}
                  <Card
                    variant="outlined"
                    sx={{
                      p: 3,
                      borderRadius: 3,
                      background:
                        "linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%)",
                      border: "2px dashed #64748b",
                      textAlign: "center",
                      cursor: "pointer",
                      transition: "all 0.3s ease-in-out",
                      "&:hover": {
                        borderColor: "primary.main",
                        transform: "translateY(-2px)",
                        boxShadow: "0 8px 25px rgba(0,0,0,0.1)",
                      },
                    }}
                  >
                    <Typography
                      variant="h6"
                      sx={{
                        mb: 2,
                        color: "primary.main",
                        fontWeight: 600,
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        gap: 1,
                      }}
                    >
                      üñºÔ∏è Vitrin Fotoƒürafƒ±
                      <Chip label="Zorunlu" color="error" size="small" />
                    </Typography>
                    <Typography
                      variant="body2"
                      color="text.secondary"
                      sx={{ mb: 3 }}
                    >
                      Ana fotoƒüraf olarak kullanƒ±lacak en iyi fotoƒürafƒ±nƒ±zƒ±
                      se√ßin
                    </Typography>
                    <input
                      accept="image/*"
                      style={{ display: "none" }}
                      id="showcase-photo"
                      type="file"
                      onChange={(e) => handlePhotoUpload(e, true)}
                    />
                    <label htmlFor="showcase-photo">
                      <Button
                        variant="contained"
                        component="span"
                        startIcon={<PhotoCamera />}
                        sx={{
                          borderRadius: 3,
                          py: 1.5,
                          px: 3,
                          fontWeight: 600,
                          background:
                            "linear-gradient(45deg, #1976d2 30%, #42a5f5 90%)",
                          "&:hover": {
                            background:
                              "linear-gradient(45deg, #1565c0 30%, #1976d2 90%)",
                          },
                        }}
                      >
                        Vitrin Fotoƒürafƒ± Se√ß
                      </Button>
                    </label>

                    {/* Vitrin fotoƒürafƒ± √∂nizlemesi */}
                    {showcasePreview && (
                      <Box sx={{ mt: 3 }}>
                        <Box
                          sx={{
                            position: "relative",
                            display: "inline-block",
                            borderRadius: 2,
                            overflow: "hidden",
                            boxShadow: "0 4px 20px rgba(0,0,0,0.15)",
                          }}
                        >
                          <img
                            src={showcasePreview}
                            alt="Vitrin fotoƒürafƒ± √∂nizleme"
                            style={{
                              width: "200px",
                              height: "150px",
                              objectFit: "cover",
                            }}
                          />
                        </Box>
                        <Typography
                          variant="caption"
                          color="primary"
                          sx={{ display: "block", mt: 1 }}
                        >
                          Vitrin Fotoƒürafƒ± ‚úì
                        </Typography>
                      </Box>
                    )}

                    {formData.showcasePhoto && !showcasePreview && (
                      <Chip
                        label={formData.showcasePhoto.name}
                        color="primary"
                        sx={{ ml: 2 }}
                      />
                    )}
                  </Card>

                  {/* Diƒüer Fotoƒüraflar */}
                  <Card
                    variant="outlined"
                    sx={{
                      p: 3,
                      borderRadius: 3,
                      background:
                        "linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)",
                      border: "2px dashed #64748b",
                      textAlign: "center",
                      cursor: "pointer",
                      transition: "all 0.3s ease-in-out",
                      "&:hover": {
                        borderColor: "primary.main",
                        transform: "translateY(-2px)",
                        boxShadow: "0 8px 25px rgba(0,0,0,0.1)",
                      },
                    }}
                  >
                    <Typography
                      variant="h6"
                      sx={{
                        mb: 2,
                        color: "primary.main",
                        fontWeight: 600,
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        gap: 1,
                      }}
                    >
                      üì∑ Diƒüer Fotoƒüraflar
                      <Chip label="ƒ∞steƒüe Baƒülƒ±" color="info" size="small" />
                    </Typography>
                    <Typography
                      variant="body2"
                      color="text.secondary"
                      sx={{ mb: 3 }}
                    >
                      Aracƒ±nƒ±zƒ±n farklƒ± a√ßƒ±lardan fotoƒüraflarƒ±nƒ± ekleyin (En
                      fazla 15 adet)
                    </Typography>
                    <input
                      accept="image/*"
                      style={{ display: "none" }}
                      id="other-photos"
                      type="file"
                      multiple
                      onChange={(e) => handlePhotoUpload(e, false)}
                    />
                    <label htmlFor="other-photos">
                      <Button
                        variant="outlined"
                        component="span"
                        startIcon={<PhotoCamera />}
                        disabled={formData.photos.length >= 15}
                      >
                        Fotoƒüraf Ekle ({formData.photos.length}/15)
                      </Button>
                    </label>

                    {formData.photos.length > 0 && (
                      <Box sx={{ mt: 3 }}>
                        <Typography
                          variant="subtitle2"
                          sx={{ mb: 2, fontWeight: 600 }}
                        >
                          Y√ºklenen Fotoƒüraflar ({formData.photos.length}/15)
                        </Typography>

                        {/* Fotoƒüraf √∂nizlemeleri grid */}
                        <Box
                          sx={{
                            display: "grid",
                            gridTemplateColumns:
                              "repeat(auto-fill, minmax(120px, 1fr))",
                            gap: 2,
                            maxHeight: "300px",
                            overflowY: "auto",
                            p: 1,
                            border: "1px solid #e0e0e0",
                            borderRadius: 2,
                          }}
                        >
                          {formData.photos.map((file, index) => (
                            <Box
                              key={index}
                              sx={{
                                position: "relative",
                                width: "100%",
                                paddingTop: "75%", // 4:3 Aspect Ratio
                                border: "1px solid #ddd",
                                borderRadius: 2,
                                overflow: "hidden",
                                boxShadow: 1,
                              }}
                            >
                              <img
                                src={
                                  photoPreviews[index] ||
                                  URL.createObjectURL(file)
                                }
                                alt={`Fotoƒüraf ${index + 1}`}
                                style={{
                                  position: "absolute",
                                  top: 0,
                                  left: 0,
                                  width: "100%",
                                  height: "100%",
                                  objectFit: "cover",
                                }}
                              />

                              <Box
                                onClick={() => removePhoto(index)}
                                sx={{
                                  position: "absolute",
                                  top: 4,
                                  right: 4,
                                  width: 24,
                                  height: 24,
                                  borderRadius: "50%",
                                  background: "rgba(255,255,255,0.9)",
                                  display: "flex",
                                  alignItems: "center",
                                  justifyContent: "center",
                                  cursor: "pointer",
                                  "&:hover": {
                                    background: "#ff1744",
                                    color: "white",
                                  },
                                }}
                              >
                                <Typography
                                  sx={{
                                    fontSize: 12,
                                    fontWeight: "bold",
                                    lineHeight: 1,
                                  }}
                                >
                                  ‚úï
                                </Typography>
                              </Box>

                              <Box
                                sx={{
                                  position: "absolute",
                                  bottom: 0,
                                  left: 0,
                                  right: 0,
                                  background: "rgba(0,0,0,0.7)",
                                  color: "white",
                                  textAlign: "center",
                                  py: 0.5,
                                }}
                              >
                                <Typography
                                  variant="caption"
                                  sx={{ fontSize: "10px" }}
                                >
                                  {index + 1}
                                </Typography>
                              </Box>
                            </Box>
                          ))}
                        </Box>

                        {/* Eski chip g√∂r√ºn√ºm√º - fallback */}
                        {photoPreviews.length === 0 && (
                          <Box
                            sx={{ display: "flex", flexWrap: "wrap", gap: 1 }}
                          >
                            {formData.photos.map((photo, index) => (
                              <Chip
                                key={index}
                                label={photo.name}
                                onDelete={() => removePhoto(index)}
                                color="secondary"
                              />
                            ))}
                          </Box>
                        )}
                      </Box>
                    )}
                  </Card>
                </Box>
              </CardContent>
            </Card>

            {/* üìç Konum ve ƒ∞leti≈üim Bilgileri */}
            <Card
              elevation={6}
              sx={{
                borderRadius: 3,
                background: "linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)",
                border: "1px solid #e2e8f0",
                transition: "all 0.3s ease-in-out",
                "&:hover": {
                  transform: "translateY(-2px)",
                  boxShadow: "0 8px 30px rgba(0,0,0,0.12)",
                },
              }}
            >
              <CardContent sx={{ p: 4 }}>
                <Box sx={{ display: "flex", alignItems: "center", mb: 3 }}>
                  <Box
                    sx={{
                      background:
                        "linear-gradient(135deg, #4caf50 0%, #8bc34a 100%)",
                      borderRadius: "50%",
                      p: 1.5,
                      mr: 2,
                    }}
                  >
                    <LocationOn sx={{ color: "white", fontSize: 28 }} />
                  </Box>
                  <Typography
                    variant="h5"
                    sx={{
                      fontWeight: 700,
                      background:
                        "linear-gradient(135deg, #4caf50 0%, #8bc34a 100%)",
                      WebkitBackgroundClip: "text",
                      WebkitTextFillColor: "transparent",
                    }}
                  >
                    Konum
                  </Typography>
                </Box>

                <Box
                  sx={{
                    display: "grid",
                    gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
                    gap: 3,
                  }}
                >
                  {/* Satƒ±cƒ± Adƒ± */}

                  {/* ≈ûehir */}
                  <FormControl
                    fullWidth
                    variant="outlined"
                    sx={{
                      "& .MuiOutlinedInput-root": {
                        borderRadius: 3,
                        "&:hover fieldset": { borderColor: "primary.main" },
                      },
                    }}
                  >
                    <InputLabel>ƒ∞l</InputLabel>
                    <Select
                      value={formData.cityId}
                      onChange={(e) => handleCityChange(e.target.value)}
                      label="ƒ∞l"
                      required
                    >
                      {cities.map((city) => (
                        <MenuItem key={city.id} value={city.id.toString()}>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              gap: 1,
                            }}
                          >
                            <span>üèôÔ∏è</span> {city.plateCode} - {city.name}
                          </Box>
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>

                  {/* ƒ∞l√ße */}
                  <FormControl
                    fullWidth
                    variant="outlined"
                    sx={{
                      "& .MuiOutlinedInput-root": {
                        borderRadius: 3,
                        "&:hover fieldset": { borderColor: "primary.main" },
                      },
                    }}
                  >
                    <InputLabel>ƒ∞l√ße</InputLabel>
                    <Select
                      value={formData.districtId}
                      onChange={(e) =>
                        handleInputChange("districtId", e.target.value)
                      }
                      label="ƒ∞l√ße"
                      disabled={!formData.cityId}
                      required
                    >
                      {districts.map((district) => (
                        <MenuItem
                          key={district.id}
                          value={district.id.toString()}
                        >
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              gap: 1,
                            }}
                          >
                            <span>üèòÔ∏è</span> {district.name}
                          </Box>
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Box>
              </CardContent>
            </Card>

            {/* Submit Button */}
            <Box sx={{ display: "flex", justifyContent: "center", mt: 4 }}>
              <Button
                type="submit"
                variant="contained"
                disabled={loading}
                size="large"
                sx={{
                  minWidth: 300,
                  py: 2,
                  fontSize: "1.2rem",
                  fontWeight: "bold",
                  borderRadius: 3,
                  background:
                    "linear-gradient(45deg, #4caf50 30%, #8bc34a 90%)",
                  "&:hover": {
                    background:
                      "linear-gradient(45deg, #388e3c 30%, #689f38 90%)",
                    transform: "translateY(-2px)",
                    boxShadow: "0 8px 25px rgba(76,175,80,0.3)",
                  },
                  "&:disabled": {
                    background: "#ccc",
                  },
                }}
              >
                {loading ? "üîÑ G√∂nderiliyor..." : "üöÄ ƒ∞lanƒ± Yayƒ±nla"}
              </Button>
            </Box>
          </Box>
        </form>

        {/* Success Dialog */}
        <Dialog open={submitSuccess} onClose={handleSuccessClose}>
          <DialogTitle sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <CheckCircle color="success" />
            ƒ∞lan Ba≈üarƒ±yla Olu≈üturuldu
          </DialogTitle>
          <DialogContent>
            <Alert severity="success">
              ƒ∞lanƒ±nƒ±z ba≈üarƒ±yla yayƒ±nlandƒ±! Anasayfaya y√∂nlendiriliyorsunuz.
            </Alert>
          </DialogContent>
          <DialogActions>
            <Button onClick={handleSuccessClose} variant="contained">
              Tamam
            </Button>
          </DialogActions>
        </Dialog>
      </Container>
    </>
  );
};

export default AcikKasaForm;
